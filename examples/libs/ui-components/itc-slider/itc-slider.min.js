function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _ItcSlider;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _config = /*#__PURE__*/new WeakMap();
var _state = /*#__PURE__*/new WeakMap();
var _ItcSlider_brand = /*#__PURE__*/new WeakSet();
/**
 * @class ItcSlider
 * @version 1.0.1
 * @author https://github.com/itchief
 * @copyright Alexander Maltsev 2020 - 2023
 * @license MIT (https://github.com/itchief/ui-components/blob/master/LICENSE)
 * @tutorial https://itchief.ru/javascript/slider
 */
var ItcSlider = /*#__PURE__*/function () {
  /**
   * @param {HTMLElement} el
   * @param {Object} config
   * @param {String} prefix
   */
  function ItcSlider(_el) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'itc-slider-';
    _classCallCheck(this, ItcSlider);
    _classPrivateMethodInitSpec(this, _ItcSlider_brand);
    _classPrivateFieldInitSpec(this, _config, void 0);
    _classPrivateFieldInitSpec(this, _state, void 0);
    _classPrivateFieldSet(_state, this, {
      prefix: prefix,
      // префикс для классов
      el: _el,
      // элемент который нужно активировать как ItcSlider
      elWrapper: _el.querySelector(".".concat(prefix).concat(_assertClassBrand(ItcSlider, this.constructor, _EL_WRAPPER)._)),
      // элемент с #CLASS_WRAPPER
      elItems: _el.querySelector(".".concat(prefix).concat(_assertClassBrand(ItcSlider, this.constructor, _EL_ITEMS)._)),
      // элемент, в котором находятся слайды
      elListItem: _el.querySelectorAll(".".concat(prefix).concat(_assertClassBrand(ItcSlider, this.constructor, _EL_ITEM)._)),
      // список элементов, являющиеся слайдами
      btnPrev: _el.querySelector(".".concat(prefix).concat(_assertClassBrand(ItcSlider, this.constructor, _BTN_PREV)._)),
      // кнопка, для перехода к предыдущему слайду
      btnNext: _el.querySelector(".".concat(prefix).concat(_assertClassBrand(ItcSlider, this.constructor, _BTN_NEXT)._)),
      // кнопка, для перехода к следующему слайду
      btnClassHide: prefix + _assertClassBrand(ItcSlider, this.constructor, _BTN_HIDE)._,
      // класс для скрытия кнопки
      exOrderMin: 0,
      exOrderMax: 0,
      exItemMin: null,
      exItemMax: null,
      exTranslateMin: 0,
      exTranslateMax: 0,
      direction: 'next',
      // направление смены слайдов
      intervalId: null,
      // id таймера
      isSwiping: false,
      swipeX: 0,
      swipeY: 0
    });
    _classPrivateFieldSet(_config, this, _objectSpread({
      loop: true,
      direction: 'next',
      autoplay: false,
      interval: 5000,
      refresh: true,
      swipe: true
    }, config));
    _assertClassBrand(_ItcSlider_brand, this, _init).call(this);
    _assertClassBrand(_ItcSlider_brand, this, _attachEvents).call(this);
  }

  /**
   * Статический метод, который возвращает экземпляр ItcSlider, связанный с DOM-элементом
   * @param {HTMLElement} elSlider
   * @returns {?ItcSlider}
   */
  return _createClass(ItcSlider, [{
    key: "slideNext",
    value: function slideNext() {
      _classPrivateFieldGet(_state, this).direction = 'next';
      _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
    }
  }, {
    key: "slidePrev",
    value: function slidePrev() {
      _classPrivateFieldGet(_state, this).direction = 'prev';
      _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
    }
  }, {
    key: "slideTo",
    value: function slideTo(index) {
      _assertClassBrand(_ItcSlider_brand, this, _moveTo).call(this, index);
    }
  }, {
    key: "reset",
    value: function reset() {
      _assertClassBrand(_ItcSlider_brand, this, _reset).call(this);
    }
  }, {
    key: "autoplay",
    get: function get() {
      var _this = this;
      return {
        // Start autoplay
        start: function start() {
          _classPrivateFieldGet(_config, _this).autoplay = true;
          _assertClassBrand(_ItcSlider_brand, _this, _autoplay).call(_this);
        },
        // Stop autoplay
        stop: function stop() {
          _assertClassBrand(_ItcSlider_brand, _this, _autoplay).call(_this, 'stop');
          _classPrivateFieldGet(_config, _this).autoplay = false;
        }
      };
    }
  }, {
    key: "dispose",
    value: function dispose() {
      var _this2 = this;
      _assertClassBrand(_ItcSlider_brand, this, _detachEvents).call(this);
      var transitionNoneClass = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(ItcSlider, this.constructor, _TRANSITION_NONE)._;
      var activeClass = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(ItcSlider, this.constructor, _EL_ITEM_ACTIVE)._;
      _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this, 'stop');
      _classPrivateFieldGet(_state, this).elItems.classList.add(transitionNoneClass);
      _classPrivateFieldGet(_state, this).elItems.style.transform = '';
      _classPrivateFieldGet(_state, this).elListItem.forEach(function (el) {
        el.style.transform = '';
        el.classList.remove(activeClass);
      });
      var selIndicators = "".concat(_classPrivateFieldGet(_state, this).prefix).concat(_assertClassBrand(ItcSlider, this.constructor, _EL_INDICATOR_ACTIVE)._);
      document.querySelectorAll(".".concat(selIndicators)).forEach(function (el) {
        el.classList.remove(selIndicators);
      });
      _classPrivateFieldGet(_state, this).elItems.offsetHeight;
      _classPrivateFieldGet(_state, this).elItems.classList.remove(transitionNoneClass);
      var index = _assertClassBrand(ItcSlider, this.constructor, _instances)._.findIndex(function (el) {
        return el.target === _classPrivateFieldGet(_state, _this2).el;
      });
      _assertClassBrand(ItcSlider, this.constructor, _instances)._.splice(index, 1);
    }
  }], [{
    key: "checkSupportPassiveEvents",
    value: function checkSupportPassiveEvents() {
      var passiveSupported = false;
      try {
        var options = Object.defineProperty({}, 'passive', {
          get: function get() {
            passiveSupported = true;
          }
        });
        window.addEventListener('testPassiveListener', null, options);
        window.removeEventListener('testPassiveListener', null, options);
      } catch (error) {
        passiveSupported = false;
      }
      return passiveSupported;
    }
  }, {
    key: "getInstance",
    value: function getInstance(elSlider) {
      var found = _assertClassBrand(ItcSlider, this, _instances)._.find(function (el) {
        return el.target === elSlider;
      });
      if (found) {
        return found.instance;
      }
      return null;
    }

    /**
     * @param {String|HTMLElement} target
     * @param {Object} config
     * @param {String} prefix
     */
  }, {
    key: "getOrCreateInstance",
    value: function getOrCreateInstance(target) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'itc-slider-';
      var elSlider = typeof target === 'string' ? document.querySelector(target) : target;
      var result = this.getInstance(elSlider);
      if (result) {
        return result;
      }
      var slider = new this(elSlider, config, prefix);
      _assertClassBrand(ItcSlider, this, _instances)._.push({
        target: elSlider,
        instance: slider
      });
      return slider;
    }

    // статический метод для активирования элементов как ItcSlider на основе data-атрибутов
  }, {
    key: "createInstances",
    value: function createInstances() {
      var _this3 = this;
      document.querySelectorAll('[data-slider="itc-slider"]').forEach(function (el) {
        var dataset = el.dataset;
        var params = {};
        Object.keys(dataset).forEach(function (key) {
          if (key === 'slider') {
            return;
          }
          var value = dataset[key];
          value = Number.isNaN(Number(value)) ? value : Number(value);
          value = value === 'true' ? true : value;
          value = value === 'false' ? false : value;
          params[key] = value;
        });
        _this3.getOrCreateInstance(el, params);
      });
    }
  }]);
}();
_ItcSlider = ItcSlider;
function _onClick(e) {
  if (_classPrivateFieldGet(_state, this).isMoving) {
    e.preventDefault();
  }
  if (!(e.target.closest('.itc-slider-btn') || e.target.closest('.itc-slider-indicators'))) {
    return;
  }
  var classBtnPrev = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(_ItcSlider, this.constructor, _BTN_PREV)._;
  var classBtnNext = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(_ItcSlider, this.constructor, _BTN_NEXT)._;
  _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this, 'stop');
  if (e.target.closest(".".concat(classBtnPrev)) || e.target.closest(".".concat(classBtnNext))) {
    _classPrivateFieldGet(_state, this).direction = e.target.closest(".".concat(classBtnPrev)) ? 'prev' : 'next';
    _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
  } else if (e.target.dataset.slideTo) {
    var index = parseInt(e.target.dataset.slideTo, 10);
    _assertClassBrand(_ItcSlider_brand, this, _moveTo).call(this, index);
  }
  _classPrivateFieldGet(_config, this).loop ? _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this) : null;
}
function _onMouseEnter() {
  _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this, 'stop');
}
function _onMouseLeave() {
  _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this);
}
function _onTransitionStart() {
  var _this4 = this;
  if (_classPrivateFieldGet(_config, this).loop) {
    if (_classPrivateFieldGet(_state, this).isBalancing) {
      return;
    }
    _classPrivateFieldGet(_state, this).isBalancing = true;
    window.requestAnimationFrame(function () {
      _assertClassBrand(_ItcSlider_brand, _this4, _balanceItems).call(_this4, false);
    });
  }
}
function _onTransitionEnd() {
  if (_classPrivateFieldGet(_config, this).loop) {
    _classPrivateFieldGet(_state, this).isBalancing = false;
  }
}
function _onDragStart(e) {
  e.preventDefault();
}
function _onVisibilityChange() {
  if (document.visibilityState === 'hidden') {
    _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this, 'stop');
  } else if (document.visibilityState === 'visible' && _classPrivateFieldGet(_config, this).loop) {
    _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this);
  }
}
function _touchStart(e) {
  _classPrivateFieldGet(_state, this).isMoving = false;
  _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this, 'stop');
  var event = e.type.search('touch') === 0 ? e.touches[0] : e;
  _classPrivateFieldGet(_state, this).swipeX = event.clientX;
  _classPrivateFieldGet(_state, this).swipeY = event.clientY;
  _classPrivateFieldGet(_state, this).isSwiping = true;
  _classPrivateFieldGet(_state, this).isTouchMoving = false;
}
function _touchEnd(e) {
  if (!_classPrivateFieldGet(_state, this).isSwiping) {
    return;
  }
  var event = e.type.search('touch') === 0 ? e.changedTouches[0] : e;
  var wrapperRect = _classPrivateFieldGet(_state, this).elWrapper.getBoundingClientRect();
  var clientX = event.clientX < wrapperRect.left ? wrapperRect.left : event.clientX;
  clientX = clientX > wrapperRect.right ? wrapperRect.right : clientX;
  var diffPosX = _classPrivateFieldGet(_state, this).swipeX - clientX;
  if (diffPosX === 0) {
    _classPrivateFieldGet(_state, this).isSwiping = false;
    return;
  }
  if (!_classPrivateFieldGet(_config, this).loop) {
    var isNotMoveFirst = _classPrivateFieldGet(_state, this).activeItems[0] === 1 && diffPosX <= 0;
    var isNotMoveLast = _classPrivateFieldGet(_state, this).activeItems[_classPrivateFieldGet(_state, this).activeItems.length - 1] && diffPosX >= 0;
    if (isNotMoveFirst || isNotMoveLast) {
      diffPosX = 0;
    }
  }
  var value = diffPosX / _classPrivateFieldGet(_state, this).width * 100;
  var transitionNoneClass = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(_ItcSlider, this.constructor, _TRANSITION_NONE)._;
  _classPrivateFieldGet(_state, this).elItems.classList.remove(transitionNoneClass);
  if (value > _assertClassBrand(_ItcSlider, this.constructor, _SWIPE_THRESHOLD)._) {
    _classPrivateFieldGet(_state, this).direction = 'next';
    var count = 0;
    while (count <= Math.floor(Math.abs(value) - _assertClassBrand(_ItcSlider, this.constructor, _SWIPE_THRESHOLD)._) / 100) {
      _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
      count += 1;
    }
  } else if (value < -_assertClassBrand(_ItcSlider, this.constructor, _SWIPE_THRESHOLD)._) {
    _classPrivateFieldGet(_state, this).direction = 'prev';
    var _count = 0;
    while (_count <= Math.floor(Math.abs(value) - _assertClassBrand(_ItcSlider, this.constructor, _SWIPE_THRESHOLD)._) / 100) {
      _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
      _count += 1;
    }
  } else {
    _classPrivateFieldGet(_state, this).direction = 'none';
    _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
  }
  _classPrivateFieldGet(_state, this).isSwiping = false;
  if (_classPrivateFieldGet(_config, this).loop) {
    _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this);
  }
  _classPrivateFieldGet(_state, this).isBalancing = false;
}
function _touchMove(e) {
  var _this5 = this;
  if (!_classPrivateFieldGet(_state, this).isSwiping) {
    return;
  }
  _classPrivateFieldGet(_state, this).isMoving = true;
  var event = e.type.search('touch') === 0 ? e.changedTouches[0] : e;
  var diffPosX = _classPrivateFieldGet(_state, this).swipeX - event.clientX;
  var diffPosY = _classPrivateFieldGet(_state, this).swipeY - event.clientY;
  var prevPosX = _classPrivateFieldGet(_state, this).prevPosX ? _classPrivateFieldGet(_state, this).prevPosX : event.clientX;
  var direction = prevPosX > event.clientX ? 'next' : 'prev';
  _classPrivateFieldGet(_state, this).prevPosX = event.clientX;
  if (!_classPrivateFieldGet(_state, this).isTouchMoving) {
    if (Math.abs(diffPosY) > Math.abs(diffPosX) || Math.abs(diffPosX) === 0) {
      _classPrivateFieldGet(_state, this).isSwiping = false;
      return;
    }
    _classPrivateFieldGet(_state, this).isTouchMoving = true;
  }
  e.preventDefault();
  if (!_classPrivateFieldGet(_config, this).loop) {
    var isNotMoveFirst = _classPrivateFieldGet(_state, this).activeItems[0] === 1 && diffPosX <= 0;
    var isNotMoveLast = _classPrivateFieldGet(_state, this).activeItems[_classPrivateFieldGet(_state, this).activeItems.length - 1] && diffPosX >= 0;
    if (isNotMoveFirst || isNotMoveLast) {
      diffPosX /= 4;
    }
  }
  var transitionNoneClass = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(_ItcSlider, this.constructor, _TRANSITION_NONE)._;
  _classPrivateFieldGet(_state, this).elItems.classList.add(transitionNoneClass);
  var translate = _classPrivateFieldGet(_state, this).translate - diffPosX;
  _classPrivateFieldGet(_state, this).elItems.style.transform = "translate3D(".concat(translate, "px, 0px, 0.1px)");
  if (_classPrivateFieldGet(_config, this).loop) {
    _classPrivateFieldGet(_state, this).direction = diffPosX > 0 ? 'next' : 'prev';
    _classPrivateFieldGet(_state, this).direction = direction;
    window.requestAnimationFrame(function () {
      _assertClassBrand(_ItcSlider_brand, _this5, _balanceItems).call(_this5, true);
    });
  }
}
function _attachEvents() {
  var _this6 = this;
  _classPrivateFieldGet(_state, this).events = {
    click: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _onClick).bind(this), true],
    mouseenter: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _onMouseEnter).bind(this), true],
    mouseleave: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _onMouseLeave).bind(this), true],
    transitionstart: [_classPrivateFieldGet(_state, this).elItems, _assertClassBrand(_ItcSlider_brand, this, _onTransitionStart).bind(this), _classPrivateFieldGet(_config, this).loop],
    transitionend: [_classPrivateFieldGet(_state, this).elItems, _assertClassBrand(_ItcSlider_brand, this, _onTransitionEnd).bind(this), _classPrivateFieldGet(_config, this).loop],
    touchstart: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _touchStart).bind(this), _classPrivateFieldGet(_config, this).swipe],
    mousedown: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _touchStart).bind(this), _classPrivateFieldGet(_config, this).swipe],
    touchend: [document, _assertClassBrand(_ItcSlider_brand, this, _touchEnd).bind(this), _classPrivateFieldGet(_config, this).swipe],
    mouseup: [document, _assertClassBrand(_ItcSlider_brand, this, _touchEnd).bind(this), _classPrivateFieldGet(_config, this).swipe],
    touchmove: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _touchMove).bind(this), _classPrivateFieldGet(_config, this).swipe],
    mousemove: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _touchMove).bind(this), _classPrivateFieldGet(_config, this).swipe],
    dragstart: [_classPrivateFieldGet(_state, this).el, _assertClassBrand(_ItcSlider_brand, this, _onDragStart).bind(this), true],
    visibilitychange: [document, _assertClassBrand(_ItcSlider_brand, this, _onVisibilityChange).bind(this), true]
  };
  Object.keys(_classPrivateFieldGet(_state, this).events).forEach(function (type) {
    if (_classPrivateFieldGet(_state, _this6).events[type][2]) {
      var el = _classPrivateFieldGet(_state, _this6).events[type][0];
      var fn = _classPrivateFieldGet(_state, _this6).events[type][1];
      if (type === 'touchstart' || type === 'touchmove') {
        var options = _this6.constructor.checkSupportPassiveEvents() ? {
          passive: false
        } : false;
        el.addEventListener(type, fn, options);
      } else {
        el.addEventListener(type, fn);
      }
    }
  });
  var resizeObserver = new ResizeObserver(function (entries) {
    window.requestAnimationFrame(_assertClassBrand(_ItcSlider_brand, _this6, _reset).bind(_this6));
  });
  resizeObserver.observe(_classPrivateFieldGet(_state, this).elWrapper);
}
function _detachEvents() {
  var _this7 = this;
  Object.keys(_classPrivateFieldGet(_state, this).events).forEach(function (type) {
    if (_classPrivateFieldGet(_state, _this7).events[type][2]) {
      var el = _classPrivateFieldGet(_state, _this7).events[type][0];
      var fn = _classPrivateFieldGet(_state, _this7).events[type][1];
      el.removeEventListener(type, fn);
    }
  });
}
function _autoplay(action) {
  var _this8 = this;
  if (!_classPrivateFieldGet(_config, this).autoplay) {
    return;
  }
  if (action === 'stop') {
    clearInterval(_classPrivateFieldGet(_state, this).intervalId);
    _classPrivateFieldGet(_state, this).intervalId = null;
    return;
  }
  if (_classPrivateFieldGet(_state, this).intervalId === null) {
    _classPrivateFieldGet(_state, this).intervalId = setInterval(function () {
      _classPrivateFieldGet(_state, _this8).direction = _classPrivateFieldGet(_config, _this8).direction === 'prev' ? 'prev' : 'next';
      _assertClassBrand(_ItcSlider_brand, _this8, _move).call(_this8);
    }, _classPrivateFieldGet(_config, this).interval);
  }
}
function _balanceItems() {
  var _this9 = this;
  var once = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (!_classPrivateFieldGet(_state, this).isBalancing && !once) {
    return;
  }
  var wrapperRect = _classPrivateFieldGet(_state, this).elWrapper.getBoundingClientRect();
  var targetWidth = wrapperRect.width / _classPrivateFieldGet(_state, this).countActiveItems / 2;
  var countItems = _classPrivateFieldGet(_state, this).elListItem.length;
  if (_classPrivateFieldGet(_state, this).direction === 'next') {
    var exItemRectRight = _classPrivateFieldGet(_state, this).exItemMin.getBoundingClientRect().right;
    if (exItemRectRight < wrapperRect.left - targetWidth) {
      var elFound = _classPrivateFieldGet(_state, this).els.find(function (item) {
        return item.el === _classPrivateFieldGet(_state, _this9).exItemMin;
      });
      elFound.order = _classPrivateFieldGet(_state, this).exOrderMin + countItems;
      var translate = _classPrivateFieldGet(_state, this).exTranslateMin + countItems * _classPrivateFieldGet(_state, this).width;
      elFound.translate = translate;
      _classPrivateFieldGet(_state, this).exItemMin.style.transform = "translate3D(".concat(translate, "px, 0px, 0.1px)");
      _assertClassBrand(_ItcSlider_brand, this, _updateExProperties).call(this);
    }
  } else {
    var exItemRectLeft = _classPrivateFieldGet(_state, this).exItemMax.getBoundingClientRect().left;
    if (exItemRectLeft > wrapperRect.right + targetWidth) {
      var _elFound = _classPrivateFieldGet(_state, this).els.find(function (item) {
        return item.el === _classPrivateFieldGet(_state, _this9).exItemMax;
      });
      _elFound.order = _classPrivateFieldGet(_state, this).exOrderMax - countItems;
      var _translate = _classPrivateFieldGet(_state, this).exTranslateMax - countItems * _classPrivateFieldGet(_state, this).width;
      _elFound.translate = _translate;
      _classPrivateFieldGet(_state, this).exItemMax.style.transform = "translate3D(".concat(_translate, "px, 0px, 0.1px)");
      _assertClassBrand(_ItcSlider_brand, this, _updateExProperties).call(this);
    }
  }
  if (!once) {
    window.requestAnimationFrame(function () {
      _assertClassBrand(_ItcSlider_brand, _this9, _balanceItems).call(_this9, false);
    });
  }
}
function _updateClasses() {
  var _this10 = this;
  var activeClass = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(_ItcSlider, this.constructor, _EL_ITEM_ACTIVE)._;
  _classPrivateFieldGet(_state, this).activeItems.forEach(function (item, index) {
    if (item) {
      _classPrivateFieldGet(_state, _this10).elListItem[index].classList.add(activeClass);
    } else {
      _classPrivateFieldGet(_state, _this10).elListItem[index].classList.remove(activeClass);
    }
    var elListIndicators = _classPrivateFieldGet(_state, _this10).el.querySelectorAll(".".concat(_classPrivateFieldGet(_state, _this10).prefix).concat(_assertClassBrand(_ItcSlider, _this10.constructor, _EL_INDICATOR)._));
    if (elListIndicators.length && item) {
      elListIndicators[index].classList.add("".concat(_classPrivateFieldGet(_state, _this10).prefix).concat(_assertClassBrand(_ItcSlider, _this10.constructor, _EL_INDICATOR_ACTIVE)._));
    } else if (elListIndicators.length && !item) {
      elListIndicators[index].classList.remove("".concat(_classPrivateFieldGet(_state, _this10).prefix).concat(_assertClassBrand(_ItcSlider, _this10.constructor, _EL_INDICATOR_ACTIVE)._));
    }
  });
}
function _move() {
  if (_classPrivateFieldGet(_state, this).direction === 'none') {
    var _transform = _classPrivateFieldGet(_state, this).translate;
    _classPrivateFieldGet(_state, this).elItems.style.transform = "translate3D(".concat(_transform, "px, 0px, 0.1px)");
    return;
  }
  var widthItem = _classPrivateFieldGet(_state, this).direction === 'next' ? -_classPrivateFieldGet(_state, this).width : _classPrivateFieldGet(_state, this).width;
  var transform = _classPrivateFieldGet(_state, this).translate + widthItem;
  if (!_classPrivateFieldGet(_config, this).loop) {
    var limit = _classPrivateFieldGet(_state, this).width * (_classPrivateFieldGet(_state, this).elListItem.length - _classPrivateFieldGet(_state, this).countActiveItems);
    if (transform < -limit || transform > 0) {
      return;
    }
    if (_classPrivateFieldGet(_state, this).btnPrev) {
      _classPrivateFieldGet(_state, this).btnPrev.classList.remove(_classPrivateFieldGet(_state, this).btnClassHide);
      _classPrivateFieldGet(_state, this).btnNext.classList.remove(_classPrivateFieldGet(_state, this).btnClassHide);
    }
    if (_classPrivateFieldGet(_state, this).btnPrev && transform === -limit) {
      _classPrivateFieldGet(_state, this).btnNext.classList.add(_classPrivateFieldGet(_state, this).btnClassHide);
    } else if (_classPrivateFieldGet(_state, this).btnPrev && transform === 0) {
      _classPrivateFieldGet(_state, this).btnPrev.classList.add(_classPrivateFieldGet(_state, this).btnClassHide);
    }
  }
  if (_classPrivateFieldGet(_state, this).direction === 'next') {
    _classPrivateFieldGet(_state, this).activeItems = [].concat(_toConsumableArray(_classPrivateFieldGet(_state, this).activeItems.slice(-1)), _toConsumableArray(_classPrivateFieldGet(_state, this).activeItems.slice(0, -1)));
  } else {
    _classPrivateFieldGet(_state, this).activeItems = [].concat(_toConsumableArray(_classPrivateFieldGet(_state, this).activeItems.slice(1)), _toConsumableArray(_classPrivateFieldGet(_state, this).activeItems.slice(0, 1)));
  }
  _assertClassBrand(_ItcSlider_brand, this, _updateClasses).call(this);
  _classPrivateFieldGet(_state, this).translate = transform;
  _classPrivateFieldGet(_state, this).elItems.style.transform = "translate3D(".concat(transform, "px, 0px, 0.1px)");
}
function _moveTo(index) {
  var delta = _classPrivateFieldGet(_state, this).activeItems.reduce(function (acc, current, currentIndex) {
    var diff = current ? index - currentIndex : acc;
    return Math.abs(diff) < Math.abs(acc) ? diff : acc;
  }, _classPrivateFieldGet(_state, this).activeItems.length);
  if (delta !== 0) {
    _classPrivateFieldGet(_state, this).direction = delta > 0 ? 'next' : 'prev';
    for (var i = 0; i < Math.abs(delta); i++) {
      _assertClassBrand(_ItcSlider_brand, this, _move).call(this);
    }
  }
}
// приватный метод для выполнения первичной инициализации
function _init() {
  var _this11 = this;
  // состояние элементов
  _classPrivateFieldGet(_state, this).els = [];
  // текущее значение translate
  _classPrivateFieldGet(_state, this).translate = 0;
  // позиции активных элементов
  _classPrivateFieldGet(_state, this).activeItems = [];
  // состояние элементов
  _classPrivateFieldGet(_state, this).isBalancing = false;
  // получаем gap между слайдами
  var gap = parseFloat(getComputedStyle(_classPrivateFieldGet(_state, this).elItems).gap) || 0;
  // ширина одного слайда
  _classPrivateFieldGet(_state, this).width = _classPrivateFieldGet(_state, this).elListItem[0].getBoundingClientRect().width + gap;
  // ширина #EL_WRAPPER
  var widthWrapper = _classPrivateFieldGet(_state, this).elWrapper.getBoundingClientRect().width;
  // количество активных элементов
  _classPrivateFieldGet(_state, this).countActiveItems = Math.round(widthWrapper / _classPrivateFieldGet(_state, this).width);
  _classPrivateFieldGet(_state, this).elListItem.forEach(function (el, index) {
    el.style.transform = '';
    _classPrivateFieldGet(_state, _this11).activeItems.push(index < _classPrivateFieldGet(_state, _this11).countActiveItems ? 1 : 0);
    _classPrivateFieldGet(_state, _this11).els.push({
      el: el,
      index: index,
      order: index,
      translate: 0
    });
  });
  if (_classPrivateFieldGet(_state, this).countActiveItems === _classPrivateFieldGet(_state, this).elListItem.length) {
    if (_classPrivateFieldGet(_state, this).btnPrev) {
      _classPrivateFieldGet(_state, this).btnPrev.classList.add(_classPrivateFieldGet(_state, this).btnClassHide);
    }
    if (_classPrivateFieldGet(_state, this).btnNext) {
      _classPrivateFieldGet(_state, this).btnNext.classList.add(_classPrivateFieldGet(_state, this).btnClassHide);
    }
  } else {
    if (_classPrivateFieldGet(_state, this).btnPrev) {
      _classPrivateFieldGet(_state, this).btnPrev.classList.remove(_classPrivateFieldGet(_state, this).btnClassHide);
    }
    if (_classPrivateFieldGet(_state, this).btnNext) {
      _classPrivateFieldGet(_state, this).btnNext.classList.remove(_classPrivateFieldGet(_state, this).btnClassHide);
    }
  }
  if (_classPrivateFieldGet(_config, this).loop) {
    var lastIndex = _classPrivateFieldGet(_state, this).elListItem.length - 1;
    var translate = -(lastIndex + 1) * _classPrivateFieldGet(_state, this).width;
    _classPrivateFieldGet(_state, this).elListItem[lastIndex].style.transform = "translate3D(".concat(translate, "px, 0px, 0.1px)");
    _classPrivateFieldGet(_state, this).els[lastIndex].order = -1;
    _classPrivateFieldGet(_state, this).els[lastIndex].translate = translate;
    _assertClassBrand(_ItcSlider_brand, this, _updateExProperties).call(this);
  } else if (_classPrivateFieldGet(_state, this).btnPrev) {
    _classPrivateFieldGet(_state, this).btnPrev.classList.add(_classPrivateFieldGet(_state, this).btnClassHide);
  }
  _assertClassBrand(_ItcSlider_brand, this, _updateClasses).call(this);
  _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this);
}
function _reset() {
  var _this12 = this;
  var transitionNoneClass = _classPrivateFieldGet(_state, this).prefix + _assertClassBrand(_ItcSlider, this.constructor, _TRANSITION_NONE)._;
  // получаем gap между слайдами
  var gap = parseFloat(getComputedStyle(_classPrivateFieldGet(_state, this).elItems).gap) || 0;
  // ширина одного слайда
  var widthItem = _classPrivateFieldGet(_state, this).elListItem[0].getBoundingClientRect().width + gap;
  var widthWrapper = _classPrivateFieldGet(_state, this).elWrapper.getBoundingClientRect().width;
  var countActiveEls = Math.round(widthWrapper / widthItem);
  if (widthItem === _classPrivateFieldGet(_state, this).width && countActiveEls === _classPrivateFieldGet(_state, this).countActiveItems) {
    return;
  }
  _assertClassBrand(_ItcSlider_brand, this, _autoplay).call(this, 'stop');
  _classPrivateFieldGet(_state, this).elItems.classList.add(transitionNoneClass);
  _classPrivateFieldGet(_state, this).elItems.style.transform = 'translate3D(0px, 0px, 0.1px)';
  _assertClassBrand(_ItcSlider_brand, this, _init).call(this);
  window.requestAnimationFrame(function () {
    _classPrivateFieldGet(_state, _this12).elItems.classList.remove(transitionNoneClass);
  });
}
function _updateExProperties() {
  var els = _classPrivateFieldGet(_state, this).els.map(function (item) {
    return item.el;
  });
  var orders = _classPrivateFieldGet(_state, this).els.map(function (item) {
    return item.order;
  });
  _classPrivateFieldGet(_state, this).exOrderMin = Math.min.apply(Math, _toConsumableArray(orders));
  _classPrivateFieldGet(_state, this).exOrderMax = Math.max.apply(Math, _toConsumableArray(orders));
  var min = orders.indexOf(_classPrivateFieldGet(_state, this).exOrderMin);
  var max = orders.indexOf(_classPrivateFieldGet(_state, this).exOrderMax);
  _classPrivateFieldGet(_state, this).exItemMin = els[min];
  _classPrivateFieldGet(_state, this).exItemMax = els[max];
  _classPrivateFieldGet(_state, this).exTranslateMin = _classPrivateFieldGet(_state, this).els[min].translate;
  _classPrivateFieldGet(_state, this).exTranslateMax = _classPrivateFieldGet(_state, this).els[max].translate;
}
var _EL_WRAPPER = {
  _: 'wrapper'
};
var _EL_ITEMS = {
  _: 'items'
};
var _EL_ITEM = {
  _: 'item'
};
var _EL_ITEM_ACTIVE = {
  _: 'item-active'
};
var _EL_INDICATOR = {
  _: 'indicator'
};
var _EL_INDICATOR_ACTIVE = {
  _: 'indicator-active'
};
var _BTN_PREV = {
  _: 'btn-prev'
};
var _BTN_NEXT = {
  _: 'btn-next'
};
var _BTN_HIDE = {
  _: 'btn-hide'
};
var _TRANSITION_NONE = {
  _: 'transition-none'
};
var _SWIPE_THRESHOLD = {
  _: 20
};
var _instances = {
  _: []
};
ItcSlider.createInstances();